(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{348:function(a,s,n){a.exports=n.p+"assets/img/mem.94749375.jpeg"},349:function(a,s,n){a.exports=n.p+"assets/img/arc_strong.cde51665.png"},350:function(a,s,n){a.exports=n.p+"assets/img/block1.84bfc4e6.png"},351:function(a,s,n){a.exports=n.p+"assets/img/block2.2607e91f.png"},352:function(a,s,n){a.exports=n.p+"assets/img/block3.985470e2.png"},353:function(a,s,n){a.exports=n.p+"assets/img/block4.5309feb7.png"},354:function(a,s,n){a.exports=n.p+"assets/img/block5.d08b4610.png"},355:function(a,s,n){a.exports=n.p+"assets/img/block6.baf08fab.png"},356:function(a,s,n){a.exports=n.p+"assets/img/block7.c6d1a503.png"},357:function(a,s,n){a.exports=n.p+"assets/img/block8.31f89ca3.png"},366:function(a,s,n){"use strict";n.r(s);var e=n(42),t=Object(e.a)({},(function(){var a=this,s=a.$createElement,e=a._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h2",{attrs:{id:"堆与栈"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#堆与栈"}},[a._v("#")]),a._v(" 堆与栈")]),a._v(" "),e("p",[a._v("1.栈区(stack):由编译器自动分配释放，函数的参数值，局部变量等值。"),e("br"),a._v("\n2.堆区(heap):一般由开发人员分配释放，若不释放，则可能会引起内存泄漏。\n"),e("img",{attrs:{src:n(348),alt:"内存分布"}})]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('NSString* string = @"sdfsdf";//常量string->栈\nNSMutableString* mString = [[NSMutableString alloc] initWithString:@"sdfsdf"];//mString->堆\n')])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br")])]),e("h2",{attrs:{id:"引用计数器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#引用计数器"}},[a._v("#")]),a._v(" 引用计数器")]),a._v(" "),e("p",[a._v("ObjC采用引用计数（reference counting）技术来进行内存管理：")]),a._v(" "),e("ol",[e("li",[a._v("每个对象都有一个关联的整数，称为引用计数器")]),a._v(" "),e("li",[a._v("当代码需要使用该对象时，则将对象的引用计数加1")]),a._v(" "),e("li",[a._v("当代码结束使用该对象时，则将对象的引用计数减1")]),a._v(" "),e("li",[a._v("当引用计数的值变为0时，此时对象将被释放。")])]),a._v(" "),e("p",[a._v("与之对应的消息发送方法如下：")]),a._v(" "),e("ol",[e("li",[a._v("当对象被创建（alloc、new或copy等方法）时，其引用计数初始值为1")]),a._v(" "),e("li",[a._v("给对象发送retain消息，其引用计数加1")]),a._v(" "),e("li",[a._v("给对象发送release消息，其引用计数减1")]),a._v(" "),e("li",[a._v("当对象引用计数归0时，ObjC給对象发送dealloc消息销毁对象")])]),a._v(" "),e("p",[a._v("例如：")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('RetainCountObject * object = [[RetainCountObject alloc]init];  // --\x3e引用计数为1\n[object retain];      // --\x3e引用计数为2\n[object release];     // --\x3e引用计数为1\n[object release];     // --\x3e引用计数为0\nobject = nil;         // --\x3e销毁对象\n\n特殊情况\nNSString * str = @" hello";  // --\x3e引用计数为-1，常量对象由栈管理，没有引用计数\n')])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br")])]),e("h2",{attrs:{id:"自动释放池"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自动释放池"}},[a._v("#")]),a._v(" 自动释放池")]),a._v(" "),e("h3",{attrs:{id:"原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#原理"}},[a._v("#")]),a._v(" 原理")]),a._v(" "),e("p",[a._v("自动释放池，系统有一个现成的自动内存管理池，他会随着每一个mainRunloop的结束而释放其中的对像.自动释放池也可以手动创建，他可以让池中的对象在执行完代码后马上被释放，可以起到优化内存，防止内存溢出的效果（如视频帧图片的切换时、创建大量临时对象时等）。")]),a._v(" "),e("p",[a._v("autorelease"),e("br"),a._v("\n延迟释放，注册到autoreleasepool(自动释放池)中，等到pool结束时释放池再自动调用release进行释放.每个Runloop中都创建一个Autorelease pool（自动释放池），每一次的Autorelease，系统都会把该Object放入了当前的Autorelease pool中，并在Runloop的末尾进行释放，而当该pool被释放时，该pool中的所有Object会被调用Release。 所以，一般情况下，每个接受autorelease消息的对象，都会在下个Runloop开始前被释放")]),a._v(" "),e("p",[a._v("release"),e("br"),a._v("\n立即释放")]),a._v(" "),e("p",[a._v("autorelease的具体使用方法如下")]),a._v(" "),e("ul",[e("li",[a._v("生成并持有NSAutoreleasePool对象。")]),a._v(" "),e("li",[a._v("调用已分配对象的autorelease实例方法。")]),a._v(" "),e("li",[a._v("废弃NSAutoreleasePool对象。")])]),a._v(" "),e("h3",{attrs:{id:"创建"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建"}},[a._v("#")]),a._v(" 创建")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("MRC：\nNSAutoreleasePool* pool = [[NSAutoreleasePool alloc]init];\n// do something\nid obj = [[NSMutableArray alloc] init];\n[obj autorelease];\n[pool release];\n// [pool drain];//GC（垃圾回收机制）环境没影响\n\nARC：\n@autoReleasePool{\n   id __autoreleasing obj2;\n   obj2 = obj;\n}\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br"),e("span",{staticClass:"line-number"},[a._v("11")]),e("br"),e("span",{staticClass:"line-number"},[a._v("12")]),e("br"),e("span",{staticClass:"line-number"},[a._v("13")]),e("br")])]),e("p",[a._v("调用过autorelease实例方法的对象（MRC，同ARC使用__autoreleasing修饰符的对象）被加入到了autoreleasepool,在pool release时，这些被加入的对象将调用release进行释放.autorelease实例方法的本质就是调用NSAutoreleasePool对象的addObject类方法。")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("- (id) autorelease {\n    [NSAutoreleasePool addObject: self];\n}\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br")])]),e("h3",{attrs:{id:"触发"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#触发"}},[a._v("#")]),a._v(" 触发")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('- (void)autoRelease_Test {\n    @autoreleasepool {\n        TestModel *model = [[TestModel alloc] init];\n        [model autorelease];\n        //model can dongSomething you want\n        NSLog(@"自动释放：end");\n    }\n}\n')])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br")])]),e("p",[a._v("MRC_Project[2678:287011] 自动释放：end"),e("br"),a._v("\nMRC_Project[2678:287011] TestModel dealloc"),e("br"),a._v("\n可以看到，当自动释放调用后，model对象才被释放，因此在池子释放之前，model可以正常调用。")]),a._v(" "),e("h2",{attrs:{id:"mrc"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mrc"}},[a._v("#")]),a._v(" MRC")]),a._v(" "),e("h3",{attrs:{id:"自己生成的对象，自己持有"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自己生成的对象，自己持有"}},[a._v("#")]),a._v(" 自己生成的对象，自己持有")]),a._v(" "),e("p",[a._v("当new、alloc、copy、mutableCopy创建一个对象时只有自己持有，引用计数为1")]),a._v(" "),e("h3",{attrs:{id:"非自己生成的对象，自己也能持有"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#非自己生成的对象，自己也能持有"}},[a._v("#")]),a._v(" 非自己生成的对象，自己也能持有")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("//非自己生成的对象，暂时没有持有\nid obj = [NSMutableArray array];\n//通过retain持有对象\n[obj retain];\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br")])]),e("p",[a._v("上述代码中NSMutableArray通过类方法array生成了一个对象赋给变量obj，但变量obj自己并不持有该对象。使用retain方法可以持有对象。")]),a._v(" "),e("h3",{attrs:{id:"不再需要自己持有的对象时释放"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#不再需要自己持有的对象时释放"}},[a._v("#")]),a._v(" 不再需要自己持有的对象时释放")]),a._v(" "),e("p",[a._v("自己持有的对象，一旦不再需要，持有者有义务释放该对象。释放使用release方法")]),a._v(" "),e("ul",[e("li",[a._v("自己生成并持有对象的释放")])]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("// 自己生成并持有对象\nid obj = [[NSObject alloc] init];\n//释放对象\n[obj release];\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br")])]),e("ul",[e("li",[a._v("非自己生成的对象持有对象的释放")])]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("//非自己生成的对象，暂时没有持有\nid obj = [NSMutableArray array];\n\n//通过retain持有对象\n[obj retain];\n\n//释放对象\n[obj release];\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br")])]),e("ul",[e("li",[a._v("非自己生成的对象本身的释放")])]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("+ (id)array {\n    //生成并持有对象\n    id obj = [[NSMutableArray alloc] init];\n\n    //使用autorelease不持有对象\n    [obj autorelease];\n\n    //返回对象\n    return obj;\n}\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br")])]),e("h3",{attrs:{id:"非自己持有的对象无法释放"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#非自己持有的对象无法释放"}},[a._v("#")]),a._v(" 非自己持有的对象无法释放")]),a._v(" "),e("p",[a._v("对于用alloc/new/copy/mutableCopy方法生成并持有的对象，或是用retain方法持有的对象，由于持有者是自己，所以在不需要该对象时需要将其释放。而由此以外所得到的对象绝对不能释放。倘若在程序中释放了非自己所持有的对象就会造成崩溃。")]),a._v(" "),e("h2",{attrs:{id:"arc"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#arc"}},[a._v("#")]),a._v(" ARC")]),a._v(" "),e("p",[a._v("一个编译器级的能简化应用中对象内存管理流程的功能。它并非运行时的特性，也不是如java中的GC运行时的垃圾回收系统。在编译阶段，编译器将在项目代码中自动为分配对象插入retain、release、copy、autorelease和autoreleasepool，且插入的代码不可见。ARC模式下引用计数规则还起作用，只是编译器会为开发者分担大部分的内存管理工作，除了插入上述代码，还有一部分优化以及分析内存的管理工作。\n例如")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("-(void)setup\n{\n    per = [person new];\n}\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br")])]),e("p",[a._v("在手工管理内存的环境下，per是不会自动保留其值，而在ARC下编译，其代码会变成：")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("-(void)setup\n{\n    person *tmp = [person new];\n    per = [tmp retain];\n    [tmp release];\n}\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br")])]),e("p",[a._v("ARC系统在自动调用这些方法时，并不通过普通的Objective-C消息派发控制，而是直接调用底层C语言的方法：比如retain，ARC在分析到某处需要调用保留操作的地方，调用了与retain等价的底层函数 objc_retain，所以这也是ARC下不能覆写retain、release或者autorelease的原因，因为这些方法在ARC从来不会被直接调用")]),a._v(" "),e("h3",{attrs:{id:"修饰符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#修饰符"}},[a._v("#")]),a._v(" 修饰符")]),a._v(" "),e("h4",{attrs:{id:"strong"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#strong"}},[a._v("#")]),a._v(" __strong")]),a._v(" "),e("p",[a._v("强引用，对应定义 property 时用到的 strong。当对象没有任何一个强引用指向它时，它才会被释放。如果在声明引用时不加修饰符，那么引用将默认是强引用。当需要释放强引用指向的对象时，需要保证所有指向对象强引用置为 nil。__strong 修饰符是 id 类型和对象类型默认的所有权修饰符。")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("{\n    id __strong obj = [[NSObject alloc] init];\n}\n\n//编译器的模拟代码\nid obj = objc_msgSend(NSObject,@selector(alloc));\nobjc_msgSend(obj,@selector(init));\n\n// 出作用域的时候调用\nobjc_release(obj);\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br")])]),e("p",[a._v("虽然ARC有效时不能使用release方法，但由此可知编译器自动插入了release。"),e("br"),a._v("\n对象是通过除alloc、new、copy、multyCopy外方法产生的情况")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("{\n    id __strong obj = [NSMutableArray array];\n}\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br")])]),e("p",[a._v("结果与之前稍有不同：")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("//编译器的模拟代码\nid obj = objc_msgSend(NSMutableArray,@selector(array));\nobjc_retainAutoreleasedReturnValue(obj);\nobjc_release(obj);\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br")])]),e("p",[a._v("objc_retainAutoreleasedReturnValue函数主要用于优化程序的运行。它是用于持有(retain)对象的函数，它持有的对象应为返回注册在autoreleasePool中对象的方法，或是函数的返回值。像该源码这样，在调用array类方法之后，由编译器插入该函数。")]),a._v(" "),e("p",[a._v("而这种objc_retainAutoreleasedReturnValue函数是成对存在的，与之对应的函数是objc_autoreleaseReturnValue。它用于array类方法返回对象的实现上。下面看看NSMutableArray类的array方法通过编译器进行了怎样的转换：")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("+ (id)array\n{\n    return [[NSMutableArray alloc] init];\n}\n\n//编译器模拟代码\n+ (id)array\n{\n    id obj = objc_msgSend(NSMutableArray,@selector(alloc));\n    objc_msgSend(obj,@selector(init));\n\n    // 代替我们调用了autorelease方法\n    return objc_autoreleaseReturnValue(obj);\n}\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br"),e("span",{staticClass:"line-number"},[a._v("11")]),e("br"),e("span",{staticClass:"line-number"},[a._v("12")]),e("br"),e("span",{staticClass:"line-number"},[a._v("13")]),e("br"),e("span",{staticClass:"line-number"},[a._v("14")]),e("br")])]),e("p",[a._v("我们可以看见调用了objc_autoreleaseReturnValue函数且这个函数会返回注册到自动释放池的对象，但是，这个函数有个特点，它会查看调用方的命令执行列表，如果发现接下来会调用objc_retainAutoreleasedReturnValue则不会将返回的对象注册到autoreleasePool中而仅仅返回一个对象。达到了一种最优效果。如下图：\n"),e("img",{attrs:{src:n(349),alt:"strong"}})]),a._v(" "),e("h4",{attrs:{id:"weak"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#weak"}},[a._v("#")]),a._v(" __weak")]),a._v(" "),e("p",[a._v("弱引用，对应定义 property 时用到的 weak。弱引用不会影响对象的释放，而当对象被释放时，所有指向它的弱引用都会自定被置为 nil，这样可以防止野指针。使用__weak修饰的变量，即是使用注册到autoreleasePool中的对象。__weak 最常见的一个作用就是用来避免循环循环。\n__weak 的几个使用场景：")]),a._v(" "),e("ul",[e("li",[a._v("在 Delegate 关系中防止循环引用。")]),a._v(" "),e("li",[a._v("在 Block 中防止循环引用。")]),a._v(" "),e("li",[a._v("用来修饰指向由 Interface Builder 创建的控件。比如：@property (weak, nonatomic) IBOutlet UIButton *testButton;。")])]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("{\n    id __weak obj = [[NSObject alloc] init];\n}\n\n编译器转换后的代码如下:\nid obj;\nid tmp = objc_msgSend(NSObject,@selector(alloc));\nobjc_msgSend(tmp,@selector(init));\nobjc_initweak(&obj,tmp);\nobjc_release(tmp);\nobjc_destroyWeak(&object);\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br"),e("span",{staticClass:"line-number"},[a._v("11")]),e("br")])]),e("p",[a._v("对于__weak内存管理也借助了类似于引用计数表的散列表，它通过对象的内存地址做为key，而对应的__weak修饰符变量的地址作为value注册到weak表中，在上述代码中objc_initweak就是完成这部分操作，而objc_destroyWeak则是销毁该对象对应的value。当指向的对象被销毁时，会通过其内存地址，去weak表中查找对应的__weak修饰符变量，将其从weak表中删除。所以，weak在修饰只是让weak表增加了记录没有引起引用计数表的变化."),e("br"),a._v("\n对象通过objc_release释放对象内存的动作如下:")]),a._v(" "),e("blockquote",[e("p",[a._v("objc_release"),e("br"),a._v("\n因为引用计数为0所以执行dealloc"),e("br"),a._v("\n_objc_rootDealloc"),e("br"),a._v("\nobjc_dispose"),e("br"),a._v("\nobjc_destructInstance"),e("br"),a._v("\nobjc_clear_deallocating")])]),a._v(" "),e("p",[a._v("而在对象被废弃时最后调用了objc_clear_deallocating，该函数的动作如下:")]),a._v(" "),e("blockquote",[e("p",[a._v("从weak表中获取已废弃对象内存地址对应的所有记录"),e("br"),a._v("\n将已废弃对象内存地址对应的记录中所有以weak修饰的变量都置为nil"),e("br"),a._v("\n从weak表删除已废弃对象内存地址对应的记录"),e("br"),a._v("\n根据已废弃对象内存地址从引用计数表中找到对应记录删除"),e("br"),a._v("\n据此可以解释为什么对象被销毁时对应的weak指针变量全部都置为nil，同时，也看出来销毁weak步骤较多，如果大量使用weak的话会增加CPU的负荷。"),e("br"),a._v("\n还需要确认一点是：使用__weak修饰符的变量，即是使用注册到autoreleasePool中的对象。")])]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('{\n    id __weak obj1 = obj;\n    NSLog(@"obj2-%@",obj1);\n}\n编译器转换上述代码如下:\nid obj1;\nobjc_initweak(&obj1,obj);\nid tmp = objc_loadWeakRetained(&obj1);\nobjc_autorelease(tmp);\nNSLog(@"%@",tmp);\nobjc_destroyWeak(&obj1);\n')])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br"),e("span",{staticClass:"line-number"},[a._v("11")]),e("br")])]),e("p",[a._v("objc_loadWeakRetained函数获取附有__weak修饰符变量所引用的对象并retain, objc_autorelease函数将对象放入autoreleasePool中，据此当我们访问weak修饰指针指向的对象时，实际上是访问注册到自动释放池的对象。因此，如果大量使用weak的话，在我们去访问weak修饰的对象时，会有大量对象注册到自动释放池,这会影响程序的性能。")]),a._v(" "),e("p",[a._v("解决方案：要访问weak修饰的变量时，先将其赋给一个strong变量，然后进行访问")]),a._v(" "),e("p",[a._v("为什么访问weak修饰的对象就会访问注册到自动释放池的对象呢?")]),a._v(" "),e("p",[a._v("因为weak不会引起对象的引用计数器变化，因此，该对象在运行过程中很有可能会被释放。所以，需要将对象注册到自动释放池中并在autoreleasePool销毁时释放对象占用的内存。")]),a._v(" "),e("h4",{attrs:{id:"unsafe-unretained"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#unsafe-unretained"}},[a._v("#")]),a._v(" __unsafe_unretained")]),a._v(" "),e("p",[a._v("ARC 是在 iOS5 引入的，而 __unsafe_unretained 这个修饰符主要是为了在ARC刚发布时兼容iOS4以及版本更低的系统，因为这些版本没有弱引用机制。这个修饰符在定义property时对应的是unsafe_unretained。__unsafe_unretained 修饰的指针纯粹只是指向对象，没有任何额外的操作，不会去持有对象使得对象的 retainCount +1。而在指向的对象被释放时依然原原本本地指向原来的对象地址，不会被自动置为 nil，所以成为了野指针，非常不安全。")]),a._v(" "),e("p",[a._v("__unsafe_unretained 的应用场景：")]),a._v(" "),e("p",[a._v("在 ARC 环境下但是要兼容 iOS4.x 的版本，用__unsafe_unretained 替代 __weak 解决强循环循环的问题。")]),a._v(" "),e("h4",{attrs:{id:"autoreleasing"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#autoreleasing"}},[a._v("#")]),a._v(" __autoreleasing")]),a._v(" "),e("p",[a._v("将对象赋值给附有__autoreleasing修饰符的变量等同于MRC时调用对象的autorelease方法。")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("@autoeleasepool {\n    // 如果看了上面__strong的原理，就知道实际上对象已经注册到自动释放池里面了\n    id __autoreleasing obj = [[NSObject alloc] init];\n}\n\n编译器转换上述代码如下:\nid pool = objc_autoreleasePoolPush();\nid obj = objc_msgSend(NSObject,@selector(alloc));\nobjc_msgSend(obj,@selector(init));\nobjc_autorelease(obj);\nobjc_autoreleasePoolPop(pool);\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br"),e("span",{staticClass:"line-number"},[a._v("11")]),e("br")])]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("@autoreleasepool {\n        id __autoreleasing obj = [NSMutableArray array];\n    }\n\n编译器转换上述代码如下:\nid pool = objc_autoreleasePoolPush();\nid obj = objc_msgSend(NSMutableArray,@selector(array));\nobjc_retainAutoreleasedReturnValue(obj);\nobjc_autorelease(obj);\nobjc_autoreleasePoolPop(pool);\n\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br"),e("span",{staticClass:"line-number"},[a._v("11")]),e("br")])]),e("p",[a._v("上面两种方式，虽然第二种持有对象的方法从alloc方法变为了objc_retainAutoreleasedReturnValue函数，都是通过objc_autorelease，注册到autoreleasePool中。")]),a._v(" "),e("h3",{attrs:{id:"arc及mrc的属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#arc及mrc的属性"}},[a._v("#")]),a._v(" arc及mrc的属性")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("//简单的赋值  \n@property (nonatomic, assign) int value;     \n//引用计数器加一，指针复制  \n@property (nonatomic, retain) NSArray* array;   \n//生成新的内存区域，内容复制  \n@property (nonatomic, copy) NSString* string;   \n//强引用，当所有指向同一块内存的强指针都赋空时，内存将被释放  \n@property (nonatomic, strong) NSNumber* number;   \n//弱引用， 当所有指向同一块内存的强指针都赋空时，弱引用失效,为nil  \n@property (nonatomic, weak) NSData* data;    \n//不安全性弱引用，当所有指向同一块内存的强指针都赋空时，该对象将成为野指针，再次调用会导致程序崩溃  \n@property (nonatomic, unsafe_unretained) NSData* data1;    \n\n- (NSString *)string{   \n    return _string;   \n}\n\n- (void)setString:(NSString*)string{   \n    _string = string;   \n    //weak,strong,assign 的set方法   \n}\n\n- (void)setString:(NSString*)string{   \n    if(_string != string) {   \n        [_string release];   \n        _string = [string retain];   \n    }   \n    //retain 的set方法   \n}\n\n- (void)setString:(NSString*)string{   \n    if(_string != string) {   \n        [_string release];   \n        _string = [string copy];   \n    }   \n    //copy 的set方法   \n}\n\n//释放属性对象   \n- (void)dealloc {   \n    self.string = nil;   \n    [super dealloc];   \n}\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br"),e("span",{staticClass:"line-number"},[a._v("11")]),e("br"),e("span",{staticClass:"line-number"},[a._v("12")]),e("br"),e("span",{staticClass:"line-number"},[a._v("13")]),e("br"),e("span",{staticClass:"line-number"},[a._v("14")]),e("br"),e("span",{staticClass:"line-number"},[a._v("15")]),e("br"),e("span",{staticClass:"line-number"},[a._v("16")]),e("br"),e("span",{staticClass:"line-number"},[a._v("17")]),e("br"),e("span",{staticClass:"line-number"},[a._v("18")]),e("br"),e("span",{staticClass:"line-number"},[a._v("19")]),e("br"),e("span",{staticClass:"line-number"},[a._v("20")]),e("br"),e("span",{staticClass:"line-number"},[a._v("21")]),e("br"),e("span",{staticClass:"line-number"},[a._v("22")]),e("br"),e("span",{staticClass:"line-number"},[a._v("23")]),e("br"),e("span",{staticClass:"line-number"},[a._v("24")]),e("br"),e("span",{staticClass:"line-number"},[a._v("25")]),e("br"),e("span",{staticClass:"line-number"},[a._v("26")]),e("br"),e("span",{staticClass:"line-number"},[a._v("27")]),e("br"),e("span",{staticClass:"line-number"},[a._v("28")]),e("br"),e("span",{staticClass:"line-number"},[a._v("29")]),e("br"),e("span",{staticClass:"line-number"},[a._v("30")]),e("br"),e("span",{staticClass:"line-number"},[a._v("31")]),e("br"),e("span",{staticClass:"line-number"},[a._v("32")]),e("br"),e("span",{staticClass:"line-number"},[a._v("33")]),e("br"),e("span",{staticClass:"line-number"},[a._v("34")]),e("br"),e("span",{staticClass:"line-number"},[a._v("35")]),e("br"),e("span",{staticClass:"line-number"},[a._v("36")]),e("br"),e("span",{staticClass:"line-number"},[a._v("37")]),e("br"),e("span",{staticClass:"line-number"},[a._v("38")]),e("br"),e("span",{staticClass:"line-number"},[a._v("39")]),e("br"),e("span",{staticClass:"line-number"},[a._v("40")]),e("br"),e("span",{staticClass:"line-number"},[a._v("41")]),e("br"),e("span",{staticClass:"line-number"},[a._v("42")]),e("br"),e("span",{staticClass:"line-number"},[a._v("43")]),e("br")])]),e("h3",{attrs:{id:"arc规则"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#arc规则"}},[a._v("#")]),a._v(" ARC规则")]),a._v(" "),e("p",[a._v("不能使用retain/release/retainCount/autorelease"),e("br"),a._v("\n不能使用NSAllocateObject/NSDeallocateObject"),e("br"),a._v("\n须遵守内存管理的方法命名规则")]),a._v(" "),e("blockquote",[e("p",[a._v("alloc,new,copy,mutableCopy,init\n以init开始的方法的规则要比alloc,new,copy,mutableCopy更严格。该方法必须是实例方法，并且要返回对象。返回的对象应为id类型或方法声明类的对象类型，抑或是该类的超类型或子类型。该返回对象并不注册到autoreleasepool上。基本上只是对alloc方法返回值的对象进行初始化处理并返回该对象。")])]),a._v(" "),e("p",[a._v("不要显式调用dealloc")]),a._v(" "),e("h3",{attrs:{id:"mrc到arc的转变"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mrc到arc的转变"}},[a._v("#")]),a._v(" mrc到arc的转变")]),a._v(" "),e("p",[a._v("引用方式："),e("br"),a._v("\ncopy：拷贝，复制一个对象并创建strong关联，引用计数为1 ，原来对象计数不变。"),e("br"),a._v("\nassign：赋值，不涉及引用计数的变化，弱引用。ARC中对象不使用assign,但原始类型(BOOL、int、float)仍然可以使用。"),e("br"),a._v("\nretain：持有，对原对象引用计数加1，强引用。ARC中使用strong。"),e("br"),a._v("\nweak：赋值（ARC），比assign多了一个功能，对象释放后把指针置为nil，避免了野指针。"),e("br"),a._v("\nstrong：持有（ARC），等同于retain。")]),a._v(" "),e("p",[a._v("在你打开ARC时，你是不能使用retain、release、autorelease 操作的，原先需要手动添加的用来处理内存管理的引用计数的代码可以自动地由编译器完成了，但是你需要在对象属性上使用weak 和strong, 其中strong就相当于retain属性，而weak相当于assign，基础类型只需声明非原子锁即可。")]),a._v(" "),e("h2",{attrs:{id:"内存泄露"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#内存泄露"}},[a._v("#")]),a._v(" 内存泄露")]),a._v(" "),e("h4",{attrs:{id:"僵尸对象和野指针"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#僵尸对象和野指针"}},[a._v("#")]),a._v(" 僵尸对象和野指针")]),a._v(" "),e("p",[a._v("僵尸对象：内存已经被回收的对象。"),e("br"),a._v("\n野指针：指向僵尸对象的指针，向野指针发送消息会导致崩溃。")]),a._v(" "),e("h3",{attrs:{id:"循环引用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#循环引用"}},[a._v("#")]),a._v(" 循环引用")]),a._v(" "),e("p",[a._v("arc中默认的对象声明都是strong性质的，在两个或两个以上的类相互引用时，会导致循环引用，其中一方需要用weak修饰，才不会造成retainCycle，如：delegate 属性用weak声明；mrc中即用assign修饰 。")]),a._v(" "),e("ul",[e("li",[a._v("在block中引用block所属的类、实例变量或类的属性也会导致循环引用")])]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("self.block = ^{   \n        [self doSomething];   \n };\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br")])]),e("p",[a._v("block是会对内部的对象进行一次retain。也就是说，self会被retain一次。当self释放的时候，需要block释放后才会对self进行释放，但是block的释放又需要等self的dealloc中才会释放。如此一来变形成了循环引用，导致内存泄露。"),e("br"),a._v("\narc中用__weak修饰self、mrc中用__block修饰,如下代码:")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("__weak ViewController* weakSelf = self;//arc   \n//__block ViewController* weakSelf = self;//mrc   \nself.block = ^{   \n   [weakSelf doSomething];   \n};\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br")])]),e("ul",[e("li",[a._v("NSTimer的target持有self")])]),a._v(" "),e("blockquote",[e("p",[a._v("NSTimer会造成循环引用，timer会强引用target即self，一般self又会持有timer作为属性，这样就造成了循环引用。\n那么，如果timer只作为局部变量，不把timer作为属性呢？同样释放不了，因为在加入runloop的操作中，timer被强引用。而timer作为局部变量，是无法执行invalidate的，所以在timer被invalidate之前，self也就不会被释放。")])]),a._v(" "),e("h4",{attrs:{id:"循环中对象占用内存大"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#循环中对象占用内存大"}},[a._v("#")]),a._v(" 循环中对象占用内存大")]),a._v(" "),e("p",[a._v("这个问题常见于循环次数较大，循环体生成的对象占用内存较大的情景。")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("for (int i = 0; i < 10000; i ++) {  \n  Person * soldier = [[Person alloc]init];   \n  [soldier fight];    \n}\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br")])]),e("p",[a._v("该循环内产生大量的临时对象，直至循环结束才释放，可能导致内存泄漏，解决方法和上文中提到的自动释放池常见问题类似：在循环中创建自己的autoReleasePool，及时释放占用内存大的临时变量，减少内存占用峰值。")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("for (int i = 0; i < 10000; i ++) {  \n  @autoreleasepool {  \n    Person* soldier = [[Person alloc]init];  \n    [soldier fight];  \n  }  \n}\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br")])]),e("p",[a._v("然而有时候autoReleasePool也不是万能的：")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('for (int i = 0; i < 2000; i ++) {  \n  CGSize size = [UIImage imageNamed:[NSString stringWithFormat:@"%d.jpg",i]].size;         \n}\n')])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br")])]),e("p",[a._v("用imageNamed方法加载图片占用Cache的内存，autoReleasePool也不能释放。")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("for (int i = 0; i < 2000; i ++) {\n  @autoreleasepool {\n    CGSize size = [UIImage imageWithContentsOfFile:filePath].size;             \n   }\n}\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br")])]),e("h4",{attrs:{id:"系统内存警告"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#系统内存警告"}},[a._v("#")]),a._v(" 系统内存警告")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("- (void)didReceiveMemoryWarning {\n    [super didReceiveMemoryWarning];\n    self.view = nil;\n    self.data = nil;\n}\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br")])]),e("h4",{attrs:{id:"对象型变量作为c语言结构体（struct、union）的成员"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#对象型变量作为c语言结构体（struct、union）的成员"}},[a._v("#")]),a._v(" 对象型变量作为C语言结构体（struct、union）的成员")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("struct Data {\n    NSMutableArray __unsafe_unretained *array;\n};\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br")])]),e("p",[a._v("OC对象型变量如果成为了C语言结构体的成员，那么，ARC不能掌握该对象的生命周期从而有效管理内存，因此，不能这样使用。")]),a._v(" "),e("h4",{attrs:{id:"显式转换-id-和-void"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#显式转换-id-和-void"}},[a._v("#")]),a._v(' 显式转换"id" 和 "void*"')]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("非ARC下:  \nid obj = [[NSObject alloc] init];\nvoid *p = obj;\n这样的代码是可行的，id和void*可以方便得自由转化 ，但是，在ARC下是不一样的\n\nARC下id和void*有三个转换的关键字 __bridge、__bridge_retained、__bridge_transfer:\nid obj = [[NSObject alloc] init];\nvoid *p = (__bridge void*)obj;\n\n注意： __bridge不会引起对象的引用计数变化，因此，安全性不太好。相比较，__bridge_retained不仅仅实现了__bridge的功能而且能让p调用retain方法使p持有对象。另外，\n__bridge_transfer也是和release方法类似，使用__bridge_transfer进行转化，既让对象p调用一次retain方法，而且原来指针obj会调用一次release方法也非常安全\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br"),e("span",{staticClass:"line-number"},[a._v("11")]),e("br")])]),e("h2",{attrs:{id:"core-foundation-对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#core-foundation-对象"}},[a._v("#")]),a._v(" Core Foundation 对象")]),a._v(" "),e("p",[a._v("底层的 Core Foundation 对象，在创建时大多以 XxxCreateWithXxx 这样的方式创建，例如：")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('// 创建一个 CFStringRef 对象\nCFStringRef str= CFStringCreateWithCString(kCFAllocatorDefault, “hello world", kCFStringEncodingUTF8);\n\n// 创建一个 CTFontRef 对象\nCTFontRef fontRef = CTFontCreateWithName((CFStringRef)@"ArialMT", fontSize, NULL);\n')])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br")])]),e("p",[a._v("对于这些对象的引用计数的修改，要相应的使用 CFRetain 和 CFRelease 方法。如下所示：")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('// 创建一个 CTFontRef 对象\nCTFontRef fontRef = CTFontCreateWithName((CFStringRef)@"ArialMT", fontSize, NULL);\n\n// 引用计数加 1\nCFRetain(fontRef);\n\n// 引用计数减 1\nCFRelease(fontRef);\n')])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br")])]),e("p",[a._v("对于 CFRetain 和 CFRelease 两个方法，读者可以直观地认为，这与 Objective-C 对象的 retain 和 release 方法等价。所以对于底层 Core Foundation 对象，我们只需要延续以前手工管理引用计数的办法即可")]),a._v(" "),e("h2",{attrs:{id:"block内存管理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#block内存管理"}},[a._v("#")]),a._v(" Block内存管理")]),a._v(" "),e("p",[a._v("block本身是像对象一样可以retain，和release。但是，block在创建的时候，它的内存是分配在栈(stack)上，而不是在堆(heap)上。"),e("br"),a._v("\n@property(copy, nonatomic) void(^block)(void);"),e("br"),a._v("\nmrc中 copy会把block从栈上移动到堆上。"),e("br"),a._v("\n@property(strong, nonatomic) void(^block)(void);"),e("br"),a._v("\narc即时由强引用strong将其从栈复制到堆")]),a._v(" "),e("h3",{attrs:{id:"block-的内存管理："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#block-的内存管理："}},[a._v("#")]),a._v(" block 的内存管理：")]),a._v(" "),e("p",[e("img",{attrs:{src:n(350),alt:"block"}}),e("br"),a._v("\n当程序运行到这里时，stack 空间中有 shared 变量和 captured 变量。这里可以看出，__block 变量开始是处于stack上的。"),e("br"),a._v(" "),e("img",{attrs:{src:n(351),alt:"block"}}),e("br"),a._v("\n当程序运行到这里时，stack 空间中有 shared 变量，captured 变量和block1。这里可以看出，block 类型的变量开始时也是处在stack上的。"),e("br"),a._v(" "),e("img",{attrs:{src:n(352),alt:"block"}}),e("br"),a._v("\n当程序运行到这里时，stack 空间中有 shared 变量，captured 变量和block1。"),e("br"),a._v("\n这里值得注意的就是当我们直接修改stack 上的captured变量时，block1中的captured变量仍然是原来的数值10。事实上，从const 我们就可以看出，block1中的captured变量是不能被修改的而且是从stack原有变量的一个const 拷贝。在block1中访问的captured变量是const拷贝的，也就是说block1中captured = 10，而不是原有的stack上的值 20。当然，在block1中，我们也不能修改captured变量。")]),a._v(" "),e("h3",{attrs:{id:"copy-block"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#copy-block"}},[a._v("#")]),a._v(" Copy block")]),a._v(" "),e("p",[a._v("block在一开始是处在stack上的，这是为了考虑到效率的原因，但是，有时候是需要block的生命周期长于一开始的stack，这时，我们就通过copy block 来将block复制到heap。"),e("br"),a._v(" "),e("img",{attrs:{src:n(353),alt:"block"}}),e("br"),a._v("\n当程序执行完 block2 = [block1 copy];时，__block 类型变量shared，被复制到了heap中，很显然，shared变量需要被block和block2共享(当然还有stack也要共享)，而block2被移动到heap中，很可能生命周期会长于stack，所以，shared也被复制到了heap中。而block2中的captured 也被复制到了heap中。"),e("br"),a._v(" "),e("img",{attrs:{src:n(354),alt:"block"}}),e("br"),a._v("\n当程序执行完 block3 = [block2 copy];时, 我们看到的是，block2 和block3 其实指向的是同一片内存空间。事实上，block的数据结构中，保存了引用计数，而对于copy到heap中的block 再copy时，行为同普通对象retain一样，会使引用计数+1。那么如果我们对[block retain]会如何呢？ 实际上什么都没有发生，至少在现在的runtime版本下。因为retain中，不仅有引用计数+1在，而且retain的返回值，必须同返回调用对象的地址一样，而block的地址是可能变化的（stack or heap），所以，这里retain的行为几乎是被忽略掉的。")]),a._v(" "),e("p",[a._v("当heap中的block变量先于stack被销毁时，如调用 [block2 release]; [block3 release];，heap中的block2，block3 由于引用计数为0 而被销毁，而 __block 变量shared则还在heap中，因为stack还要使用，block1 也要使用。"),e("br"),a._v(" "),e("img",{attrs:{src:n(355),alt:"block"}}),e("br"),a._v("\n当heap中的block变量晚于stack时，显然，stack 被清除，function中也啥都没了。"),e("br"),a._v(" "),e("img",{attrs:{src:n(356),alt:"block"}}),e("br"),a._v("\n最后，当block2 和block3 都被release之后。则恢复到最初状态"),e("br"),a._v(" "),e("img",{attrs:{src:n(357),alt:"block"}})]),a._v(" "),e("h3",{attrs:{id:"block内存类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#block内存类型"}},[a._v("#")]),a._v(" block内存类型")]),a._v(" "),e("h4",{attrs:{id:"_1-block内存类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-block内存类型"}},[a._v("#")]),a._v(" 1.block内存类型")]),a._v(" "),e("p",[a._v("block内存分为三种类型：")]),a._v(" "),e("ul",[e("li",[a._v("_NSConcreteGlobalBlock（全局）")]),a._v(" "),e("li",[a._v("_NSConcreteStackBlock（栈）")]),a._v(" "),e("li",[a._v("_NSConcreteMallocBlock（堆）")])]),a._v(" "),e("h4",{attrs:{id:"_2-三种类型的内存的创建时机"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-三种类型的内存的创建时机"}},[a._v("#")]),a._v(" 2.三种类型的内存的创建时机")]),a._v(" "),e("h5",{attrs:{id:"_1）对于-nsconcretestackblock和-nsconcreteglobalblock类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1）对于-nsconcretestackblock和-nsconcreteglobalblock类型"}},[a._v("#")]),a._v(" 1）对于_NSConcreteStackBlock和_NSConcreteGlobalBlock类型")]),a._v(" "),e("p",[a._v("_NSConcreteStackBlock和_NSConcreteGlobalBlock这两种类型的block，我们可以手动创建，如下所示：")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("void (^globalBlock)() = ^{\n\n};\n\nint main(int argc, const char * argv[]) {\n    @autoreleasepool {\n        void (^stackBlock1)() = ^{\n\n        };\n    }\n    return 0;\n}\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br"),e("span",{staticClass:"line-number"},[a._v("11")]),e("br"),e("span",{staticClass:"line-number"},[a._v("12")]),e("br")])]),e("p",[a._v("那么我们怎么确定这两个block，就是我们所说的两种类型的block呢，我们可以使用clang -rewrite-objc xxx.m（报错可以使用详细命令： clang -x objective-c -rewrite-objc -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk xxxxx.m）编译转换成C++实现，就可以看到转换完的结果，如下所示：")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("// globalBlock\nstruct __globalBlock_block_impl_0 {\n  struct __block_impl impl;\n  struct __globalBlock_block_desc_0* Desc;\n  __globalBlock_block_impl_0(void *fp, struct __globalBlock_block_desc_0 *desc, int flags=0) {\n    impl.isa = &_NSConcreteGlobalBlock;\n    impl.Flags = flags;\n    impl.FuncPtr = fp;\n    Desc = desc;\n  }\n};\n...\n\n// stackBlock\nstruct __main_block_impl_0 {\n  struct __block_impl impl;\n  struct __main_block_desc_0* Desc;\n  __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, int flags=0) {\n    impl.isa = &_NSConcreteStackBlock;\n    impl.Flags = flags;\n    impl.FuncPtr = fp;\n    Desc = desc;\n  }\n};\n...\nint main(int argc, const char * argv[]) {\n    /* @autoreleasepool */ { __AtAutoreleasePool __autoreleasepool;\n        void (*stackBlock)() = (void (*)())&__main_block_impl_0((void *)__main_block_func_0, &__main_block_desc_0_DATA);\n    }\n    return 0;\n}\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br"),e("span",{staticClass:"line-number"},[a._v("11")]),e("br"),e("span",{staticClass:"line-number"},[a._v("12")]),e("br"),e("span",{staticClass:"line-number"},[a._v("13")]),e("br"),e("span",{staticClass:"line-number"},[a._v("14")]),e("br"),e("span",{staticClass:"line-number"},[a._v("15")]),e("br"),e("span",{staticClass:"line-number"},[a._v("16")]),e("br"),e("span",{staticClass:"line-number"},[a._v("17")]),e("br"),e("span",{staticClass:"line-number"},[a._v("18")]),e("br"),e("span",{staticClass:"line-number"},[a._v("19")]),e("br"),e("span",{staticClass:"line-number"},[a._v("20")]),e("br"),e("span",{staticClass:"line-number"},[a._v("21")]),e("br"),e("span",{staticClass:"line-number"},[a._v("22")]),e("br"),e("span",{staticClass:"line-number"},[a._v("23")]),e("br"),e("span",{staticClass:"line-number"},[a._v("24")]),e("br"),e("span",{staticClass:"line-number"},[a._v("25")]),e("br"),e("span",{staticClass:"line-number"},[a._v("26")]),e("br"),e("span",{staticClass:"line-number"},[a._v("27")]),e("br"),e("span",{staticClass:"line-number"},[a._v("28")]),e("br"),e("span",{staticClass:"line-number"},[a._v("29")]),e("br"),e("span",{staticClass:"line-number"},[a._v("30")]),e("br"),e("span",{staticClass:"line-number"},[a._v("31")]),e("br")])]),e("p",[a._v("可以看出可以看出globalBlock是_NSConcreteGlobalBlock类型，即在全局区域创建，block变量存储在全局数据存储区；stackBlock是_NSConcreteStackBlock类型，即在栈区创建。")]),a._v(" "),e("h5",{attrs:{id:"_2）对于-nsconcretemallocblock类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2）对于-nsconcretemallocblock类型"}},[a._v("#")]),a._v(" 2）对于_NSConcreteMallocBlock类型")]),a._v(" "),e("p",[a._v("NSConcreteMallocBlock类型的内存是通过_NSConcreteStackBlock类型的block copy得到的，那么哪些类型会对block进行copy呢？")]),a._v(" "),e("ul",[e("li",[a._v("block作为返回值")])]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('// 如果是weak类型的block，依然不会自动进行copy\n// <__NSStackBlock__: 0x7fff5fbff728>\n__weak void (^weakBlock)() = ^{i;};\n\n// ARC情况下输出\n// <__NSMallocBlock__\nNSLog(@"%@", [self callBack:weakBlock]);\n- (id)callBack:(void (^)(void))callBack\n{\n     NSLog(@"%@", callBack);\n\n    return callBack;\n}\n\n//输出结果\n<__NSStackBlock__: 0x7ffee2559838>\n<__NSMallocBlock__: 0x600003a99ce0>\n')])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br"),e("span",{staticClass:"line-number"},[a._v("11")]),e("br"),e("span",{staticClass:"line-number"},[a._v("12")]),e("br"),e("span",{staticClass:"line-number"},[a._v("13")]),e("br"),e("span",{staticClass:"line-number"},[a._v("14")]),e("br"),e("span",{staticClass:"line-number"},[a._v("15")]),e("br"),e("span",{staticClass:"line-number"},[a._v("16")]),e("br"),e("span",{staticClass:"line-number"},[a._v("17")]),e("br")])]),e("ul",[e("li",[a._v("block作为属性，使用copy修饰时(strong修饰符不会改变block内存类型)")])]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('@property (copy, nonatomic) id myCopyBlock;\n@property (strong, nonatomic) id myStrongBlock;\n\n// 如果是weak类型的block，依然不会自动进行copy\n// <__NSStackBlock__: 0x7fff5fbff728>\n__weak void (^weakBlock)() = ^{i;};\nNSLog(@"%@", weakBlock);\n\n//会进行copy操作\n//<__NSMallocBlock__: 0x6000037e8db0>\nself.myCopyBlock  = weakBlock;\nNSLog(@"%@", self.myCopyBlock);\n\n// 会进行strong操作\n// <__NSStackBlock__: 0x7fff5fbff728>\nself.myStrongBlock  = weakBlock;\nNSLog(@"%@", self.myStrongBlock);\n\n//打印结果\n//<__NSStackBlock__: 0x7ffee8ed5838>\n//<__NSMallocBlock__: 0x6000037e8db0>\n//<__NSStackBlock__: 0x7ffee8ed5838>\n')])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br"),e("span",{staticClass:"line-number"},[a._v("11")]),e("br"),e("span",{staticClass:"line-number"},[a._v("12")]),e("br"),e("span",{staticClass:"line-number"},[a._v("13")]),e("br"),e("span",{staticClass:"line-number"},[a._v("14")]),e("br"),e("span",{staticClass:"line-number"},[a._v("15")]),e("br"),e("span",{staticClass:"line-number"},[a._v("16")]),e("br"),e("span",{staticClass:"line-number"},[a._v("17")]),e("br"),e("span",{staticClass:"line-number"},[a._v("18")]),e("br"),e("span",{staticClass:"line-number"},[a._v("19")]),e("br"),e("span",{staticClass:"line-number"},[a._v("20")]),e("br"),e("span",{staticClass:"line-number"},[a._v("21")]),e("br"),e("span",{staticClass:"line-number"},[a._v("22")]),e("br")])]),e("ul",[e("li",[a._v("block为strong类型，且捕获了外部变量时。")])]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('int i = 10;\nvoid (^block)() = ^{i;};\n// 因为block为strong类型，且捕获了外部变量，所以赋值时，自动进行了copy\n// <__NSMallocBlock__: 0x100206920>\nNSLog(@"%@", block);\n')])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br")])]),e("ul",[e("li",[a._v("对于作为参数传递的block，其类型是什么呢？")])]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('int i = 10;\nvoid (^block)() = ^{i;};\n__weak void (^weakBlock)() = ^{i;};\nvoid (^stackBlock)() = ^{};\n// ARC情况下\n\n// 创建时，都会在栈中\n// <__NSStackBlock__: 0x7fff5fbff730>\nNSLog(@"%@", ^{i;});\n\n// 因为block为strong类型，且捕获了外部变量，所以赋值时，自动进行了copy\n// <__NSMallocBlock__: 0x100206920>\nNSLog(@"%@", block);\n\n// 如果是weak类型的block，依然不会自动进行copy\n// <__NSStackBlock__: 0x7fff5fbff728>\nNSLog(@"%@", weakBlock);\n\n// 如果block是strong类型，并且没有捕获外部变量，那么就会转换成__NSGlobalBlock__\n// <__NSGlobalBlock__: 0x100001110>\nNSLog(@"%@", stackBlock);\n\n[self callBack:weakBlock];\n[self callBack:block];\n[self callBack:stackBlock];\n\n- (id)callBack:(void (^)(void))callBack\n{\n     NSLog(@"%@", callBack);\n\n    return callBack;\n}\n\n//结果\n //<__NSStackBlock__: 0x7ffee2572838>\n//<__NSMallocBlock__: 0x600002e881e0>\n// <__NSGlobalBlock__: 0x10d68c0f8>\n\n//<__NSStackBlock__: 0x7ffee2572838>\n//<__NSMallocBlock__: 0x600002e881e0>\n//<__NSGlobalBlock__: 0x10d68c0f8>\n')])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br"),e("span",{staticClass:"line-number"},[a._v("11")]),e("br"),e("span",{staticClass:"line-number"},[a._v("12")]),e("br"),e("span",{staticClass:"line-number"},[a._v("13")]),e("br"),e("span",{staticClass:"line-number"},[a._v("14")]),e("br"),e("span",{staticClass:"line-number"},[a._v("15")]),e("br"),e("span",{staticClass:"line-number"},[a._v("16")]),e("br"),e("span",{staticClass:"line-number"},[a._v("17")]),e("br"),e("span",{staticClass:"line-number"},[a._v("18")]),e("br"),e("span",{staticClass:"line-number"},[a._v("19")]),e("br"),e("span",{staticClass:"line-number"},[a._v("20")]),e("br"),e("span",{staticClass:"line-number"},[a._v("21")]),e("br"),e("span",{staticClass:"line-number"},[a._v("22")]),e("br"),e("span",{staticClass:"line-number"},[a._v("23")]),e("br"),e("span",{staticClass:"line-number"},[a._v("24")]),e("br"),e("span",{staticClass:"line-number"},[a._v("25")]),e("br"),e("span",{staticClass:"line-number"},[a._v("26")]),e("br"),e("span",{staticClass:"line-number"},[a._v("27")]),e("br"),e("span",{staticClass:"line-number"},[a._v("28")]),e("br"),e("span",{staticClass:"line-number"},[a._v("29")]),e("br"),e("span",{staticClass:"line-number"},[a._v("30")]),e("br"),e("span",{staticClass:"line-number"},[a._v("31")]),e("br"),e("span",{staticClass:"line-number"},[a._v("32")]),e("br"),e("span",{staticClass:"line-number"},[a._v("33")]),e("br"),e("span",{staticClass:"line-number"},[a._v("34")]),e("br"),e("span",{staticClass:"line-number"},[a._v("35")]),e("br"),e("span",{staticClass:"line-number"},[a._v("36")]),e("br"),e("span",{staticClass:"line-number"},[a._v("37")]),e("br"),e("span",{staticClass:"line-number"},[a._v("38")]),e("br"),e("span",{staticClass:"line-number"},[a._v("39")]),e("br"),e("span",{staticClass:"line-number"},[a._v("40")]),e("br"),e("span",{staticClass:"line-number"},[a._v("41")]),e("br")])]),e("p",[a._v("我们可以发现函数参数的block为什么类型，block在函数中就是什么类型。")]),a._v(" "),e("h2",{attrs:{id:"autorelease内存管理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#autorelease内存管理"}},[a._v("#")]),a._v(" Autorelease内存管理")]),a._v(" "),e("h3",{attrs:{id:"_1、哪些对象是autorelease管理的？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、哪些对象是autorelease管理的？"}},[a._v("#")]),a._v(" 1、哪些对象是autorelease管理的？")]),a._v(" "),e("h4",{attrs:{id:"_1、enumerateobjectsusingblock中的对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、enumerateobjectsusingblock中的对象"}},[a._v("#")]),a._v(" 1、enumerateObjectsUsingBlock中的对象")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("[NSArray array] enumerateObjectsUsingBlock:^(id  _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {\n//自动缓存池\n}\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br")])]),e("h4",{attrs:{id:"_2、-autoreleasing-修饰的对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、-autoreleasing-修饰的对象"}},[a._v("#")]),a._v(" 2、__autoreleasing 修饰的对象")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("id obj = [NSObject new];\nid __autoreleasing o = obj;\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br")])]),e("h4",{attrs:{id:"_3、array、dictiongnary、stringwithstring等非init或者new方法生成的对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、array、dictiongnary、stringwithstring等非init或者new方法生成的对象"}},[a._v("#")]),a._v(" 3、array、dictiongnary、stringWithString等非init或者new方法生成的对象")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('int main(int argc, char * argv[]) {\nNSMutableArray *array = [NSMutableArray array];\nNSMutableArray *array1 = [NSMutableArray arrayWithCapacity:5];\nNSMutableDictionary *dict = [NSMutableDictionary dictionary];\nNSMutableString *str = [NSMutableString stringWithString:@"dsdsds"];\n')])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br")])]),e("p",[a._v("以上类型实验结果：")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('int main(int argc, char * argv[]) {\n      id obj = [NSObject new];\n      id __autoreleasing o = obj;\n      id __autoreleasing o1 = obj;\n\n    NSMutableArray *array = [NSMutableArray arrayWithCapacity:5];\n    [array addObject:@"0"];\n    [array addObject:@"1"];\n    [array addObject:@"2"];\n    [array addObject:@"3"];\n    [array addObject:@"4"];\n    [array addObject:@"5"];\n    [array addObject:@"6"];\n\n    NSMutableArray *array1 = [NSMutableArray array];\n    [array1 addObject:@"11"];\n    [array1 addObject:@"12"];\n    [array1 addObject:@"13"];\n    [array1 addObject:@"14"];\n    [array1 addObject:@"15"];\n    [array1 addObject:@"16"];\n    [array1 enumerateObjectsUsingBlock:^(id  _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {\n        id __autoreleasing o = obj;\n    }];\n\n    NSMutableDictionary *dict = [NSMutableDictionary dictionary];\n    [dict setObject:@"1" forKey:@"1"];\n\n    NSMutableString *str = [NSMutableString stringWithString:@"dsdsds"];\n//   _objc_autoreleasePoolPrint()\n}\n\n//在armv7上、使用_objc_autoreleasePoolPrint()调试打印结果\n(lldb) po _objc_autoreleasePoolPrint()\nobjc[96185]: ##############\nobjc[96185]: AUTORELEASE POOLS for thread 0x20d080\nobjc[96185]: 6 releases pending.\nobjc[96185]: [0x7e115000]  ................  PAGE  (hot) (cold)\nobjc[96185]: [0x7e115028]        0x7be71ca0  NSObject\nobjc[96185]: [0x7e11502c]        0x7be71ca0  NSObject\nobjc[96185]: [0x7e115030]        0x7c470560  __NSArrayM\nobjc[96185]: [0x7e115034]        0x7be723b0  __NSArrayM\nobjc[96185]: [0x7e115038]        0x7c170b80  __NSDictionaryM\nobjc[96185]: [0x7e11503c]        0x7be72540  __NSCFString\nobjc[96185]: ##############\n0x0a5c2500\n\n//在arm64的手机上、使用_objc_autoreleasePoolPrint()调试打印结果\n(lldb) po _objc_autoreleasePoolPrint()\nobjc[96400]: ##############\nobjc[96400]: AUTORELEASE POOLS for thread 0x1151d75c0\nobjc[96400]: 5 releases pending.\nobjc[96400]: [0x7fae43000000]  ................  PAGE  (hot) (cold)\nobjc[96400]: [0x7fae43000038]    0x600003a6c840  __NSArrayI//系统创建对象\nobjc[96400]: [0x7fae43000040]    0x600000c358b0  __NSSetI//系统创建对象\nobjc[96400]: [0x7fae43000048]    0x600002d380d0  NSObject\nobjc[96400]: [0x7fae43000050]    0x600002d380d0  NSObject\nobjc[96400]: [0x7fae43000058]    0x6000021649f0  __NSArrayM\nobjc[96400]: ##############\n0xe0675b6edaa1003f\n\n(lldb) po 0x6000021649f0\n<__NSArrayM 0x600001435d70>(\n0,\n1,\n2,\n3,\n4,\n5,\n6\n)\n')])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br"),e("span",{staticClass:"line-number"},[a._v("11")]),e("br"),e("span",{staticClass:"line-number"},[a._v("12")]),e("br"),e("span",{staticClass:"line-number"},[a._v("13")]),e("br"),e("span",{staticClass:"line-number"},[a._v("14")]),e("br"),e("span",{staticClass:"line-number"},[a._v("15")]),e("br"),e("span",{staticClass:"line-number"},[a._v("16")]),e("br"),e("span",{staticClass:"line-number"},[a._v("17")]),e("br"),e("span",{staticClass:"line-number"},[a._v("18")]),e("br"),e("span",{staticClass:"line-number"},[a._v("19")]),e("br"),e("span",{staticClass:"line-number"},[a._v("20")]),e("br"),e("span",{staticClass:"line-number"},[a._v("21")]),e("br"),e("span",{staticClass:"line-number"},[a._v("22")]),e("br"),e("span",{staticClass:"line-number"},[a._v("23")]),e("br"),e("span",{staticClass:"line-number"},[a._v("24")]),e("br"),e("span",{staticClass:"line-number"},[a._v("25")]),e("br"),e("span",{staticClass:"line-number"},[a._v("26")]),e("br"),e("span",{staticClass:"line-number"},[a._v("27")]),e("br"),e("span",{staticClass:"line-number"},[a._v("28")]),e("br"),e("span",{staticClass:"line-number"},[a._v("29")]),e("br"),e("span",{staticClass:"line-number"},[a._v("30")]),e("br"),e("span",{staticClass:"line-number"},[a._v("31")]),e("br"),e("span",{staticClass:"line-number"},[a._v("32")]),e("br"),e("span",{staticClass:"line-number"},[a._v("33")]),e("br"),e("span",{staticClass:"line-number"},[a._v("34")]),e("br"),e("span",{staticClass:"line-number"},[a._v("35")]),e("br"),e("span",{staticClass:"line-number"},[a._v("36")]),e("br"),e("span",{staticClass:"line-number"},[a._v("37")]),e("br"),e("span",{staticClass:"line-number"},[a._v("38")]),e("br"),e("span",{staticClass:"line-number"},[a._v("39")]),e("br"),e("span",{staticClass:"line-number"},[a._v("40")]),e("br"),e("span",{staticClass:"line-number"},[a._v("41")]),e("br"),e("span",{staticClass:"line-number"},[a._v("42")]),e("br"),e("span",{staticClass:"line-number"},[a._v("43")]),e("br"),e("span",{staticClass:"line-number"},[a._v("44")]),e("br"),e("span",{staticClass:"line-number"},[a._v("45")]),e("br"),e("span",{staticClass:"line-number"},[a._v("46")]),e("br"),e("span",{staticClass:"line-number"},[a._v("47")]),e("br"),e("span",{staticClass:"line-number"},[a._v("48")]),e("br"),e("span",{staticClass:"line-number"},[a._v("49")]),e("br"),e("span",{staticClass:"line-number"},[a._v("50")]),e("br"),e("span",{staticClass:"line-number"},[a._v("51")]),e("br"),e("span",{staticClass:"line-number"},[a._v("52")]),e("br"),e("span",{staticClass:"line-number"},[a._v("53")]),e("br"),e("span",{staticClass:"line-number"},[a._v("54")]),e("br"),e("span",{staticClass:"line-number"},[a._v("55")]),e("br"),e("span",{staticClass:"line-number"},[a._v("56")]),e("br"),e("span",{staticClass:"line-number"},[a._v("57")]),e("br"),e("span",{staticClass:"line-number"},[a._v("58")]),e("br"),e("span",{staticClass:"line-number"},[a._v("59")]),e("br"),e("span",{staticClass:"line-number"},[a._v("60")]),e("br"),e("span",{staticClass:"line-number"},[a._v("61")]),e("br"),e("span",{staticClass:"line-number"},[a._v("62")]),e("br"),e("span",{staticClass:"line-number"},[a._v("63")]),e("br"),e("span",{staticClass:"line-number"},[a._v("64")]),e("br"),e("span",{staticClass:"line-number"},[a._v("65")]),e("br"),e("span",{staticClass:"line-number"},[a._v("66")]),e("br"),e("span",{staticClass:"line-number"},[a._v("67")]),e("br"),e("span",{staticClass:"line-number"},[a._v("68")]),e("br"),e("span",{staticClass:"line-number"},[a._v("69")]),e("br"),e("span",{staticClass:"line-number"},[a._v("70")]),e("br"),e("span",{staticClass:"line-number"},[a._v("71")]),e("br")])]),e("p",[a._v("注意:这里面的实验结果不一样，在arm64上、array、dictiongnary、stringWithString等方法生成的对象,在自动缓存池中只能看见第一个对象，而armv7的机型上，可以看见所有的，不知这里是什么原因"),e("br"),a._v("\n两个常用的调试命令")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("//打印自动缓存池对象\n_objc_autoreleasePoolPrint()\n//打印引用计数\n_objc_rootRetainCount（obj）\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br")])]),e("h3",{attrs:{id:"_2、autoreleasepool什么时候创建的，里面的对象又是什么时候释放的？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、autoreleasepool什么时候创建的，里面的对象又是什么时候释放的？"}},[a._v("#")]),a._v(" 2、autoreleasePool什么时候创建的，里面的对象又是什么时候释放的？")]),a._v(" "),e("h4",{attrs:{id:"_1、系统通过runloop创建的autoreleasepool"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、系统通过runloop创建的autoreleasepool"}},[a._v("#")]),a._v(" 1、系统通过runloop创建的autoreleasePool")]),a._v(" "),e("p",[a._v("runloop 可以说是iOS 系统的灵魂。内存管理／UI 刷新／触摸事件这些功能都需要 runloop 去管理和实现。runloop是通过线程创建的，和线程保持一对一的关系，其关系是保存在一个全局的 Dictionary 里。线程刚创建时并没有 RunLoop，如果你不主动获取，那它一直都不会有。RunLoop 的创建是发生在第一次获取时，RunLoop 的销毁是发生在线程结束时。你只能在一个线程的内部获取其 RunLoop（主线程除外）。"),e("br"),a._v(" "),e("strong",[a._v("runloop和autoreleasePool又是什么关系呢？对象又是什么时候释放的？")]),e("br"),a._v("\nApp启动后，苹果在主线程 RunLoop 里注册了两个 Observer，其回调都是 _wrapRunLoopWithAutoreleasePoolHandler()。")]),a._v(" "),e("p",[a._v("第一个 Observer 监视的事件是 Entry(即将进入Loop)，其回调内会调用 _objc_autoreleasePoolPush() 创建自动释放池。其 order 是-2147483647，优先级最高，保证创建释放池发生在其他所有回调之前。")]),a._v(" "),e("p",[a._v("第二个 Observer 监视了两个事件： BeforeWaiting(准备进入休眠) 时调用_objc_autoreleasePoolPop() 和 _objc_autoreleasePoolPush() 释放旧的池并创建新池；Exit(即将退出Loop) 时调用 _objc_autoreleasePoolPop() 来释放自动释放池。这个 Observer 的 order 是 2147483647，优先级最低，保证其释放池子发生在其他所有回调之后。")]),a._v(" "),e("p",[a._v("在主线程执行的代码，通常是写在诸如事件回调、Timer回调内的。这些回调会被 RunLoop 创建好的 AutoreleasePool 环绕着，所以不会出现内存泄漏，开发者也不必显示创建 Pool 了。"),e("br"),a._v(" "),e("strong",[a._v("验证结果：")])]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('int main(int argc, char * argv[]) {\n    id obj = [NSObject new];\n    id __autoreleasing o = obj;\n    id __autoreleasing o1 = obj;\n\n    NSMutableArray *array = [NSMutableArray arrayWithCapacity:5];\n    [array addObject:@"0"];\n    [array addObject:@"1"];\n    [array addObject:@"2"];\n    [array addObject:@"3"];\n    [array addObject:@"4"];\n    [array addObject:@"5"];\n    [array addObject:@"6"];\n//   _objc_autoreleasePoolPrint()\n}\n\n//_objc_autoreleasePoolPrint调试打印结果\n(lldb) po _objc_autoreleasePoolPrint()\nobjc[99121]: ##############\nobjc[99121]: AUTORELEASE POOLS for thread 0x107b0d5c0\nobjc[99121]: 5 releases pending.\nobjc[99121]: [0x7f93b2002000]  ................  PAGE  (hot) (cold)\nobjc[99121]: [0x7f93b2002038]    0x6000000d66c0  __NSArrayI\nobjc[99121]: [0x7f93b2002040]    0x6000036b9680  __NSSetI\nobjc[99121]: [0x7f93b2002048]    0x600001780160  NSObject\nobjc[99121]: [0x7f93b2002050]    0x600001780160  NSObject\nobjc[99121]: [0x7f93b2002058]    0x600001bcd230  __NSArrayM\nobjc[99121]: ##############\n0x67c4279ea7c20079\n\n(lldb) po 0x600001bcd230\n<__NSArrayM 0x600001bcd230>(\n0,\n1,\n2,\n3,\n4,\n5,\n6\n)\n\n(lldb) po [NSThread currentThread]\n<NSThread: 0x6000000953c0>{number = 1, name = main}\n')])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br"),e("span",{staticClass:"line-number"},[a._v("11")]),e("br"),e("span",{staticClass:"line-number"},[a._v("12")]),e("br"),e("span",{staticClass:"line-number"},[a._v("13")]),e("br"),e("span",{staticClass:"line-number"},[a._v("14")]),e("br"),e("span",{staticClass:"line-number"},[a._v("15")]),e("br"),e("span",{staticClass:"line-number"},[a._v("16")]),e("br"),e("span",{staticClass:"line-number"},[a._v("17")]),e("br"),e("span",{staticClass:"line-number"},[a._v("18")]),e("br"),e("span",{staticClass:"line-number"},[a._v("19")]),e("br"),e("span",{staticClass:"line-number"},[a._v("20")]),e("br"),e("span",{staticClass:"line-number"},[a._v("21")]),e("br"),e("span",{staticClass:"line-number"},[a._v("22")]),e("br"),e("span",{staticClass:"line-number"},[a._v("23")]),e("br"),e("span",{staticClass:"line-number"},[a._v("24")]),e("br"),e("span",{staticClass:"line-number"},[a._v("25")]),e("br"),e("span",{staticClass:"line-number"},[a._v("26")]),e("br"),e("span",{staticClass:"line-number"},[a._v("27")]),e("br"),e("span",{staticClass:"line-number"},[a._v("28")]),e("br"),e("span",{staticClass:"line-number"},[a._v("29")]),e("br"),e("span",{staticClass:"line-number"},[a._v("30")]),e("br"),e("span",{staticClass:"line-number"},[a._v("31")]),e("br"),e("span",{staticClass:"line-number"},[a._v("32")]),e("br"),e("span",{staticClass:"line-number"},[a._v("33")]),e("br"),e("span",{staticClass:"line-number"},[a._v("34")]),e("br"),e("span",{staticClass:"line-number"},[a._v("35")]),e("br"),e("span",{staticClass:"line-number"},[a._v("36")]),e("br"),e("span",{staticClass:"line-number"},[a._v("37")]),e("br"),e("span",{staticClass:"line-number"},[a._v("38")]),e("br"),e("span",{staticClass:"line-number"},[a._v("39")]),e("br"),e("span",{staticClass:"line-number"},[a._v("40")]),e("br"),e("span",{staticClass:"line-number"},[a._v("41")]),e("br"),e("span",{staticClass:"line-number"},[a._v("42")]),e("br"),e("span",{staticClass:"line-number"},[a._v("43")]),e("br")])]),e("h4",{attrs:{id:"_2、手动autoreleasepool"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、手动autoreleasepool"}},[a._v("#")]),a._v(" 2、手动autoreleasePool")]),a._v(" "),e("p",[a._v("我们可以通过@autoreleasepool {}方式手动创建autoreleasepool对象，那么这个对象什么时候释放呢？答案是除了autoreleasepool的大括号就释放了，我们可以看下下面的实验结果")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("int main(int argc, char * argv[]) {\n\n //1.   _objc_autoreleasePoolPrint()   \n    @autoreleasepool {\n        id obj = [NSObject new];\n        id __autoreleasing o = obj;\n        id __autoreleasing o1 = obj;\n//2.   _objc_autoreleasePoolPrint()\n    }\n//3.   _objc_autoreleasePoolPrint()\n}\n\n //1.   _objc_autoreleasePoolPrint()  \n(lldb) po _objc_autoreleasePoolPrint()\nobjc[1555]: ##############\nobjc[1555]: AUTORELEASE POOLS for thread 0x11331a5c0\nobjc[1555]: 2 releases pending.\n0x2196ee78f1e100fd\n\nobjc[1555]: [0x7fc2a9802000]  ................  PAGE  (hot) (cold)\nobjc[1555]: [0x7fc2a9802038]    0x600002dbb600  __NSArrayI\nobjc[1555]: [0x7fc2a9802040]    0x600001bd8a50  __NSSetI\nobjc[1555]: ##############\n\n //2.   _objc_autoreleasePoolPrint()  \n(lldb) po _objc_autoreleasePoolPrint()\nobjc[1555]: ##############\nobjc[1555]: AUTORELEASE POOLS for thread 0x11331a5c0\n0x2196ee78f1e100fd\n\nobjc[1555]: 5 releases pending.\nobjc[1555]: [0x7fc2a9802000]  ................  PAGE  (hot) (cold)\nobjc[1555]: [0x7fc2a9802038]    0x600002dbb600  __NSArrayI\nobjc[1555]: [0x7fc2a9802040]    0x600001bd8a50  __NSSetI\nobjc[1555]: [0x7fc2a9802048]  ################  POOL 0x7fc2a9802048\nobjc[1555]: [0x7fc2a9802050]    0x600003afc030  NSObject\nobjc[1555]: [0x7fc2a9802058]    0x600003afc030  NSObject\nobjc[1555]: ##############\n\n //3.   _objc_autoreleasePoolPrint()  \n(lldb) po _objc_autoreleasePoolPrint()\nobjc[1555]: ##############\nobjc[1555]: AUTORELEASE POOLS for thread 0x11331a5c0\n0x2196ee78f1e100fd\n\nobjc[1555]: 2 releases pending.\nobjc[1555]: [0x7fc2a9802000]  ................  PAGE  (hot) (cold)\nobjc[1555]: [0x7fc2a9802038]    0x600002dbb600  __NSArrayI\nobjc[1555]: [0x7fc2a9802040]    0x600001bd8a50  __NSSetI\nobjc[1555]: ##############\n(lldb)\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br"),e("span",{staticClass:"line-number"},[a._v("11")]),e("br"),e("span",{staticClass:"line-number"},[a._v("12")]),e("br"),e("span",{staticClass:"line-number"},[a._v("13")]),e("br"),e("span",{staticClass:"line-number"},[a._v("14")]),e("br"),e("span",{staticClass:"line-number"},[a._v("15")]),e("br"),e("span",{staticClass:"line-number"},[a._v("16")]),e("br"),e("span",{staticClass:"line-number"},[a._v("17")]),e("br"),e("span",{staticClass:"line-number"},[a._v("18")]),e("br"),e("span",{staticClass:"line-number"},[a._v("19")]),e("br"),e("span",{staticClass:"line-number"},[a._v("20")]),e("br"),e("span",{staticClass:"line-number"},[a._v("21")]),e("br"),e("span",{staticClass:"line-number"},[a._v("22")]),e("br"),e("span",{staticClass:"line-number"},[a._v("23")]),e("br"),e("span",{staticClass:"line-number"},[a._v("24")]),e("br"),e("span",{staticClass:"line-number"},[a._v("25")]),e("br"),e("span",{staticClass:"line-number"},[a._v("26")]),e("br"),e("span",{staticClass:"line-number"},[a._v("27")]),e("br"),e("span",{staticClass:"line-number"},[a._v("28")]),e("br"),e("span",{staticClass:"line-number"},[a._v("29")]),e("br"),e("span",{staticClass:"line-number"},[a._v("30")]),e("br"),e("span",{staticClass:"line-number"},[a._v("31")]),e("br"),e("span",{staticClass:"line-number"},[a._v("32")]),e("br"),e("span",{staticClass:"line-number"},[a._v("33")]),e("br"),e("span",{staticClass:"line-number"},[a._v("34")]),e("br"),e("span",{staticClass:"line-number"},[a._v("35")]),e("br"),e("span",{staticClass:"line-number"},[a._v("36")]),e("br"),e("span",{staticClass:"line-number"},[a._v("37")]),e("br"),e("span",{staticClass:"line-number"},[a._v("38")]),e("br"),e("span",{staticClass:"line-number"},[a._v("39")]),e("br"),e("span",{staticClass:"line-number"},[a._v("40")]),e("br"),e("span",{staticClass:"line-number"},[a._v("41")]),e("br"),e("span",{staticClass:"line-number"},[a._v("42")]),e("br"),e("span",{staticClass:"line-number"},[a._v("43")]),e("br"),e("span",{staticClass:"line-number"},[a._v("44")]),e("br"),e("span",{staticClass:"line-number"},[a._v("45")]),e("br"),e("span",{staticClass:"line-number"},[a._v("46")]),e("br"),e("span",{staticClass:"line-number"},[a._v("47")]),e("br"),e("span",{staticClass:"line-number"},[a._v("48")]),e("br"),e("span",{staticClass:"line-number"},[a._v("49")]),e("br"),e("span",{staticClass:"line-number"},[a._v("50")]),e("br"),e("span",{staticClass:"line-number"},[a._v("51")]),e("br")])]),e("p",[a._v("从上面1、2、3的结果可以看出，当对象出了autoreleasepool的大括号就释放了。")]),a._v(" "),e("h4",{attrs:{id:"_3、子线程的autoreleasepool对象的管理？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、子线程的autoreleasepool对象的管理？"}},[a._v("#")]),a._v(" 3、子线程的autoreleasepool对象的管理？")]),a._v(" "),e("p",[a._v("线程刚创建时并没有 RunLoop，如果你不主动获取，那它一直都不会有。所以在我们创建子线程的时候，如果没有获取runloop，那么也就没用通过runloop来创建autoreleasepool，那么我们的autorelease对象是怎么管理的，会不会存在内存泄漏呢？答案是否定的，当子线程有autoreleasepool的时候，autorelease对象通过其来管理，如果没有autoreleasepool，会通过调用 autoreleaseNoPage 方法，将对象添加到 AutoreleasePoolPage 的栈中，也就是说你不进行手动的内存管理，也不会内存泄漏啦！这部分我们可以看下runtime中NSObject.mm的部分，有相关代码。")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("static inline id *autoreleaseFast(id obj)\n{\n    AutoreleasePoolPage *page = hotPage();\n    if (page && !page->full()) {\n        return page->add(obj);\n    } else if (page) {\n        return autoreleaseFullPage(obj, page);\n    } else {\n        //调用 autoreleaseNoPage 方法管理autorelease对象。\n        return autoreleaseNoPage(obj);\n    }\n}\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br"),e("span",{staticClass:"line-number"},[a._v("11")]),e("br"),e("span",{staticClass:"line-number"},[a._v("12")]),e("br")])]),e("h2",{attrs:{id:"weak对象内存管理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#weak对象内存管理"}},[a._v("#")]),a._v(" weak对象内存管理")]),a._v(" "),e("h3",{attrs:{id:"_1、释放时机"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、释放时机"}},[a._v("#")]),a._v(" 1、释放时机")]),a._v(" "),e("p",[a._v("在dealloc的时候，会将weak属性的值设置为nil")]),a._v(" "),e("h3",{attrs:{id:"_2、如何实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、如何实现"}},[a._v("#")]),a._v(" 2、如何实现")]),a._v(" "),e("p",[a._v("Runtime维护了一个weak表，用于存储指向某个对象的所有weak指针，对于 weak 对象会放入一个 hash 表中,Key是所指对象的地址，Value是weak指针的地址（这个地址的值是所指对象的地址）数组。 当此对象的引用计数为0的时候会 dealloc，假如 weak 指向的对象内存地址是a，那么就会以a为键， 在这个 weak 表中搜索，找到所有以a为键的 weak 对象，从而设置为 nil。\n注：由于可能多个weak指针指向同一个对象，所以value为一个数组")]),a._v(" "),e("p",[e("strong",[a._v("weak 的实现原理可以概括以下三步：")])]),a._v(" "),e("h4",{attrs:{id:"_1、初始化时：runtime会调用objc-initweak函数，初始化一个新的weak指针指向对象的地址。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、初始化时：runtime会调用objc-initweak函数，初始化一个新的weak指针指向对象的地址。"}},[a._v("#")]),a._v(" 1、初始化时：runtime会调用objc_initWeak函数，初始化一个新的weak指针指向对象的地址。")]),a._v(" "),e("p",[a._v("我们以下面这行代码为例：")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("{\n    id __weak obj1 = obj;\n}\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br")])]),e("p",[a._v("当我们初始化一个weak变量时，runtime会调用objc_initWeak函数。这个函数在Clang中的声明如下：")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("id objc_initWeak(id *object, id value);\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br")])]),e("p",[a._v("其具体实现如下：")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("id objc_initWeak(id *object, id value)\n{\n    *object = 0;\n    return objc_storeWeak(object, value);\n}\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br")])]),e("p",[a._v("示例代码轮换成编译器的模拟代码如下：")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("id obj1;\nobjc_initWeak(&obj1, obj);\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br")])]),e("p",[a._v("因此，这里所做的事是先将obj1初始化为0(nil)，然后将obj1的地址及obj作为参数传递给objc_storeWeak函数。\nobjc_initWeak函数有一个前提条件：就是object必须是一个没有被注册为__weak对象的有效指针。而value则可以是null，或者指向一个有效的对象。")]),a._v(" "),e("h4",{attrs:{id:"_2、添加引用时：objc-initweak函数会调用-objc-storeweak-函数。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、添加引用时：objc-initweak函数会调用-objc-storeweak-函数。"}},[a._v("#")]),a._v(" 2、添加引用时：objc_initWeak函数会调用 objc_storeWeak() 函数。")]),a._v(" "),e("p",[a._v("objc_storeWeak() 的作用是更新指针指向，创建对应的弱引用表。")]),a._v(" "),e("h4",{attrs:{id:"_3、释放时，调用cleardeallocating函数。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、释放时，调用cleardeallocating函数。"}},[a._v("#")]),a._v(" 3、释放时，调用clearDeallocating函数。")]),a._v(" "),e("p",[a._v("clearDeallocating函数首先根据对象地址获取所有weak指针地址的数组，然后遍历这个数组把其中的数据设为nil，最后把这个entry从weak表中删除，最后清理对象的记录。")]),a._v(" "),e("h2",{attrs:{id:"nsstring内存管理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#nsstring内存管理"}},[a._v("#")]),a._v(" NSString内存管理")]),a._v(" "),e("h3",{attrs:{id:"_1、nsstring内存的类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、nsstring内存的类型"}},[a._v("#")]),a._v(" 1、NSString内存的类型")]),a._v(" "),e("p",[a._v("NSString内存分为两种类型：")]),a._v(" "),e("ul",[e("li",[a._v("__NSCFConstantString（常量区）")]),a._v(" "),e("li",[a._v("__NSCFString（堆区）、NSTaggedPointerString（堆区）")])]),a._v(" "),e("h3",{attrs:{id:"_2、两种内存类型的创建时机。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、两种内存类型的创建时机。"}},[a._v("#")]),a._v(" 2、两种内存类型的创建时机。")]),a._v(" "),e("p",[a._v("生成一个NSString类型的字符串有三种方法:")]),a._v(" "),e("ul",[e("li",[a._v("方法1.直接赋值:")])]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v(' NSString *str1 = @"my string";\n')])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br")])]),e("ul",[e("li",[a._v("方法2.类函数初始化生成:")])]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('NSString *str2 = [NSString stringWithString:@"my string"];\n')])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br")])]),e("ul",[e("li",[a._v("方法3.实例方法初始化生成:")])]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('NSString *str3 = [[NSString alloc] initWithString:@"my string"];\nNSString *str4 = [[NSString alloc]initWithFormat:@"my string"];\n')])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br")])]),e("h4",{attrs:{id:"_1、对于-nscfconstantstring"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、对于-nscfconstantstring"}},[a._v("#")]),a._v(" 1、对于__NSCFConstantString")]),a._v(" "),e("p",[a._v("这种类型的字符串是常量字符串。该类型的字符串以字面量的方式创建，保存在字符串常量区，是在编译时创建的。")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('NSString *a = @"str";\nNSString *b = [[NSString alloc]init];\nNSString *c = [[NSString alloc]initWithString:@"str"];\nNSString *d = [NSString stringWithString:@"str"];\n\nNSLog(@"%@ : class = %@",a,NSStringFromClass([a class]));\nNSLog(@"%@ : class = %@",b,NSStringFromClass([b class]));\nNSLog(@"%@ : class = %@",c,NSStringFromClass([c class]));\nNSLog(@"%@ : class = %@",d,NSStringFromClass([d class]));\n\n//打印结果\n2019-06-23 19:23:13.240611+0800 BlockDemo[47229:789011] str : class = __NSCFConstantString\n2019-06-23 19:23:13.240764+0800 BlockDemo[47229:789011]  : class = __NSCFConstantString\n2019-06-23 19:23:13.240870+0800 BlockDemo[47229:789011] str : class = __NSCFConstantString\n2019-06-23 19:23:13.240957+0800 BlockDemo[47229:789011] str : class = __NSCFConstantString\n')])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br"),e("span",{staticClass:"line-number"},[a._v("11")]),e("br"),e("span",{staticClass:"line-number"},[a._v("12")]),e("br"),e("span",{staticClass:"line-number"},[a._v("13")]),e("br"),e("span",{staticClass:"line-number"},[a._v("14")]),e("br"),e("span",{staticClass:"line-number"},[a._v("15")]),e("br")])]),e("h4",{attrs:{id:"_2、对于-nscfstring和nstaggedpointerstring"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、对于-nscfstring和nstaggedpointerstring"}},[a._v("#")]),a._v(" 2、对于__NSCFString和NSTaggedPointerString")]),a._v(" "),e("ul",[e("li",[a._v("__NSCFString 表示对象类型的字符串，在运行时创建，保存在堆区，初始引用计数为1，其内存管理方式就是对象的内存管理方式。")]),a._v(" "),e("li",[a._v("NSTaggedPointerString是对__NSCFString类型的一种优化，在运行创建字符串时，会对字符串内容及长度作判断，若内容由ASCII字符构成且长度较小（具体要多小暂时不太清楚），这时候创建的字符串类型就是 NSTaggedPointerString"),e("br"),a._v(" "),e("strong",[a._v("对于不可以变NSString的测试结果：")])])]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('NSString *e = [[NSString alloc]initWithFormat:@"str"];\nNSString *f = [NSString stringWithFormat:@"str"];\nNSString *g = [NSString stringWithFormat:@"123456789"];\nNSString *h = [NSString stringWithFormat:@"1234567890"];\n\nNSLog(@"%@ : class = %@",e,NSStringFromClass([e class]));\nNSLog(@"%@ : class = %@",f,NSStringFromClass([f class]));\nNSLog(@"%@ : class = %@",g,NSStringFromClass([g class]));\nNSLog(@"%@ : class = %@",h,NSStringFromClass([h class]));\n\n//打印结果\n2019-06-23 19:27:19.115212+0800 BlockDemo[48129:794364] str : class = NSTaggedPointerString\n2019-06-23 19:27:19.115286+0800 BlockDemo[48129:794364] str : class = NSTaggedPointerString\n2019-06-23 19:27:19.115388+0800 BlockDemo[48129:794364] 123456789 : class = NSTaggedPointerString\n2019-06-23 19:27:19.115476+0800 BlockDemo[48129:794364] 1234567890 : class = __NSCFString\n')])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br"),e("span",{staticClass:"line-number"},[a._v("11")]),e("br"),e("span",{staticClass:"line-number"},[a._v("12")]),e("br"),e("span",{staticClass:"line-number"},[a._v("13")]),e("br"),e("span",{staticClass:"line-number"},[a._v("14")]),e("br"),e("span",{staticClass:"line-number"},[a._v("15")]),e("br")])]),e("p",[e("strong",[a._v("对于可变的NSMutableString")])]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('NSMutableString *ms1 = [[NSMutableString alloc]init];\nNSMutableString *ms2 = [[NSMutableString alloc]initWithString:@"str"];\nNSMutableString *ms3 = [[NSMutableString alloc]initWithFormat:@"str"];\nNSMutableString *ms4 = [NSMutableString stringWithFormat:@"str"];\nNSMutableString *ms5 = [NSMutableString stringWithFormat:@"123456789"];\nNSMutableString *ms6 = [NSMutableString stringWithFormat:@"1234567890"];\n\nNSLog(@"%@ : class = %@",ms1,NSStringFromClass([ms1 class]));\nNSLog(@"%@ : class = %@",ms2,NSStringFromClass([ms2 class]));\nNSLog(@"%@ : class = %@",ms3,NSStringFromClass([ms3 class]));\nNSLog(@"%@ : class = %@",ms4,NSStringFromClass([ms4 class]));\nNSLog(@"%@ : class = %@",ms5,NSStringFromClass([ms5 class]));\nNSLog(@"%@ : class = %@",ms6,NSStringFromClass([ms6 class]));\n\n//打印结果\n2019-06-23 19:34:08.521931+0800 BlockDemo[49465:802590]  : class = __NSCFString\n2019-06-23 19:34:08.522058+0800 BlockDemo[49465:802590] str : class = __NSCFString\n2019-06-23 19:34:08.522131+0800 BlockDemo[49465:802590] str : class = __NSCFString\n2019-06-23 19:34:08.522196+0800 BlockDemo[49465:802590] str : class = __NSCFString\n2019-06-23 19:34:08.522281+0800 BlockDemo[49465:802590] 123456789 : class = __NSCFString\n2019-06-23 19:34:08.522372+0800 BlockDemo[49465:802590] 1234567890 : class = __NSCFString\n')])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br"),e("span",{staticClass:"line-number"},[a._v("11")]),e("br"),e("span",{staticClass:"line-number"},[a._v("12")]),e("br"),e("span",{staticClass:"line-number"},[a._v("13")]),e("br"),e("span",{staticClass:"line-number"},[a._v("14")]),e("br"),e("span",{staticClass:"line-number"},[a._v("15")]),e("br"),e("span",{staticClass:"line-number"},[a._v("16")]),e("br"),e("span",{staticClass:"line-number"},[a._v("17")]),e("br"),e("span",{staticClass:"line-number"},[a._v("18")]),e("br"),e("span",{staticClass:"line-number"},[a._v("19")]),e("br"),e("span",{staticClass:"line-number"},[a._v("20")]),e("br"),e("span",{staticClass:"line-number"},[a._v("21")]),e("br")])]),e("p",[a._v("从结果我们可以看出来NSMutableString都是分配在堆区，且是__NSCFString类型，NSString中Format相关方法也是都分配在堆区，但是会根据字符串的长度，区分为__NSCFString和NSTaggedPointerString两种。在分配堆区的这些变量，其实一部分是正常的对象，一部分变成autorelease对象，具体是哪些，我们可以使用_objc_autoreleasePoolPrint()打印出来，比如实例中的g、ms4、ms5、ms6。")])])}),[],!1,null,null,null);s.default=t.exports}}]);